## The benefits of smart pointers

To put it briefly: Smart pointers were introduced in C++ to solve the problems with new 
and delete operators by providing a degree of automatic memory management: When a smart 
pointer is no longer needed (which is the case as soon as it goes out of scope), the 
memory to which it points is automatically deallocated. When contrasted with smart 
pointers, the conventional pointers we have seen so far are often termed "raw pointers".

In essence, smart pointers are classes that are wrapped around raw pointers. By overloading 
the -> and * operators, smart pointer objects make sure that the memory to which their internal 
raw pointer refers to is properly deallocated. This makes it possible to use smart pointers 
with the same syntax as raw pointers. As soon as a smart pointer goes out of scope, its 
destructor is called and the block of memory to which the internal raw pointer refers is 
properly deallocated. This technique of wrapping a management class around a resource has 
been conceived by Bjarne Stroustroup and is called Resource Acquisition Is Initialization (RAII). 

The RAII is a widespread programming paradigm, that can be used to protect a resource such as a 
file stream, a network connection or a block of memory which need proper management.

## Acquiring and releasing resources
In most programs of reasonable size, there will be many situations where a certain action 
at some point will necessitate a proper reaction at another point, such as:

- Allocating memory with new or malloc, which must be matched with a call to delete or free.
- Opening a file or network connection, which must be closed again after the content has been 
read or written.
- Protecting synchronization primitives such as atomic operations, memory barriers, monitors 
or critical sections, which must be released to allow other threads to obtain them.


## The problem of reliable resource release: 
A general usage pattern common to the above examples looks like the following:

Obtain Resource -> Use Resource -> Release Resource

However, there are several problems with this seemingly simple pattern:

- The program might throw an exception during resource use and thus the point of release might 
never be reached.
- There might be several points where the resource could potentially be released, making it 
hard for a programmer to keep track of all eventualities.
- One might simply forget to release the resource again.

## RAII to the rescue
The major idea of RAII revolves around object ownership and information hiding: Allocation 
and deallocation are hidden within the management class, so a programmer using the class 
does not have to worry about memory management responsibilities. If he has not directly 
allocated a resource, he will not need to directly deallocate it - whoever owns a resource 
deals with it. In the case of RAII this is the management class around the protected resource. 
The overall goal is to have allocation and deallocation (e.g. with new and delete) disappear 
from the surface level of the code you write.

RAII can be used to leverage - among others - the following advantages:

- Use class destructors to perform resource clean-up tasks such as proper memory deallocation 
when the RAII object gets out of scope
- Manage ownership and lifetime of dynamically allocated objects
- Implement encapsulation and information hiding due to resource acquisition and release being performed within the same object.

From the perspective of memory management, There are three major parts to an RAII class:

- A resource is allocated in the constructor of the RAII class
- The resource is deallocated in the destructor
- All instances of the RAII class are allocated on the stack to reliably control the 
lifetime via the object scope