Running Multiple Threads
Fork-Join Parallelism
Using threads follows a basic concept called "fork-join-parallelism". The basic mechanism of this 
concept follows a simple three-step pattern:

Split the flow of execution into a parallel thread ("fork")
Perform some work in both the main thread and the parallel thread
Wait for the parallel thread to finish and unite the split flow of execution again ("join")
The following diagram "fork_join_parallelism.jpg" in the folder illustrates the idea of forking.


In the main thread, the program flow is forked into three parallel branches. In both worker 
branches, some work is performed - which is why threads are often referred to as "worker 
threads". Once the work is completed, the flow of execution is united again in the main 
function using the join() command. In this example, join acts as a barrier where all 
threads are united. The execution of main is in fact halted, until both