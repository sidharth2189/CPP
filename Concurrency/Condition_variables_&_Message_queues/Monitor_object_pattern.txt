The monitor object pattern
In the previous sections we have learned that data protection is a critical element in 
concurrent programming. After looking at several ways to achieve this, we now want to 
build on these concepts to devise a method for a controlled and finely-grained data 
exchange between threads - a concurrent message queue. One important step towards such 
a construct is to implement a monitor object, which is a design pattern that synchronizes 
concurrent method execution to ensure that only one method at a time runs within an object. 
It also allows an object's methods to cooperatively schedule their execution sequences. 
The problem solved by this pattern is based on the observation that many applications 
contain objects whose methods are invoked concurrently by multiple client threads. 
These methods often modify the state of their objects, for example by adding data to 
an internal vector. For such concurrent programs to execute correctly, it is necessary 
to synchronize and schedule access to the objects very carefully. The idea of a monitor 
object is to synchronize the access to an object's methods so that only one method can 
execute at any one time.